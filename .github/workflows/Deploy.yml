name: "Terraform Deploy"

# on:
#   push:
#     branches:
#       - main
#   pull_request:

on:
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.5'

#       - name: Terraform Format
#         id: fmt
#         run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
#       - name: Terraform Validate
#         id: validate
#         run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
#         env:
#           TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
#           TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }}
#         if: github.event_name == 'pull_request'
        run: terraform plan -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" -no-color -input=false -out=tfplan
        continue-on-error: true

#       - name: Update Pull Request
#         uses: actions/github-script@v6
#         if: github.event_name == 'pull_request'
#         env:
#           PLAN: ${{ steps.plan.outputs.stdout }}
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#             <details><summary>Show Plan</summary>
#             \`\`\`terraform\n
#             ${process.env.PLAN}
#             \`\`\`
#             </details>
#             *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        run: terraform apply -auto-approve -input=false tfplan || echo "terraform apply failed"
        
      - name: Terraform Destroy
        if: ${{ steps.apply.outcome == 'failure' && steps.resources.outputs.resources != null }}
        run: terraform destroy -auto-approve
        
        
      - name: Save state to artifact
        id: state
        uses: actions/upload-artifact@v2
        with:
          name: terraform-state
          path: .terraform/terraform.tfstate
          if-no-files-found: error
